package fon.master.onlineshop.gui;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.VerticalLayout;

import fon.master.onlineshop.domain.ProductComponent;
import fon.master.onlineshop.domain.ProductComposite;
import fon.master.onlineshop.gui.product.management.ProductCRUDForm;
import fon.master.onlineshop.gui.product.management.ProductsTree;

public class ProductManagementComponent extends CustomComponent implements Button.ClickListener, ValueChangeListener{
	
	public enum Mode{
		ADD_COMPOSITE_PRODUCT,
		ADD_PRODUCT,
		EDIT_COMPOSITE_PRODUCT,
		EDIT_PRODUCT
	}
	

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	
	private HorizontalSplitPanel horizontalSplitPanel;
	private VerticalLayout leftLayout;
	private GridLayout actionsLayout;
	
	private ProductsTree productsTree;
	private ProductCRUDForm productCRUDForm;
	
	private Button addCompositeProductBtn = new Button("Add Complex Product");
	private Button addProductBtn = new Button("Add Product");	
	private Button editBtn = new Button("Edit");

	
	private static final Object CAPTION_PROPERTY = "name";
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ProductManagementComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// the main layout and components will be created here
		mainLayout = new AbsoluteLayout();
		
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		horizontalSplitPanel = new HorizontalSplitPanel();
		horizontalSplitPanel.setSplitPosition(20);
		leftLayout = new VerticalLayout();
		actionsLayout = new GridLayout();
		actionsLayout.setColumns(2);
		
		productsTree = new ProductsTree(this);
		productCRUDForm = new ProductCRUDForm(this);
		
		addProductBtn.setEnabled(true);
		addProductBtn.addListener((Button.ClickListener)this);
		addCompositeProductBtn.setEnabled(true);
		addCompositeProductBtn.addListener((Button.ClickListener)this);
		editBtn.setEnabled(false);
		editBtn.addListener((Button.ClickListener)this);
		
		actionsLayout.addComponent(addProductBtn);
		actionsLayout.addComponent(addCompositeProductBtn);
		actionsLayout.addComponent(editBtn);
        
       	leftLayout.addComponent(productsTree);
		leftLayout.addComponent(actionsLayout);
		
		horizontalSplitPanel.addComponent(leftLayout);
		horizontalSplitPanel.addComponent(productCRUDForm);
		
		mainLayout.addComponent(horizontalSplitPanel, "top:0.0px;left:0.0px;");

		return mainLayout;
	}
	
	public void productSelected(ProductComponent selectedProduct){
		editBtn.setEnabled(true);
		productCRUDForm.disableProductForm();
		productCRUDForm.productSelected(selectedProduct);
	}	
	
	public void buttonClick(ClickEvent event) {
		final Button source = event.getButton();
		if(source == addCompositeProductBtn){
			productCRUDForm.prepareProductForm(Mode.ADD_COMPOSITE_PRODUCT);
		}else if(source == addProductBtn){
			productCRUDForm.prepareProductForm(Mode.ADD_PRODUCT);
		}else if(source == editBtn){
			if(productsTree.getSelectedProduct() instanceof ProductComposite){
				productCRUDForm.prepareProductForm(Mode.EDIT_COMPOSITE_PRODUCT);
			}else{
				productCRUDForm.prepareProductForm(Mode.EDIT_PRODUCT);
			}
		}
	}
	
	public void valueChange(ValueChangeEvent event) {
        final Object id = productsTree.getValue(); // selected item id
        if (event.getProperty() == productsTree) {
            // a Tree item was (un) selected
            if (id == null) {
            	System.out.println("######### ID is NULL");
            	removeTreeListenerFromForm(this);
            } else {
            	System.out.println("######### ID is NOT NULL");
            	removeTreeListenerFromForm(this);
				productSelected((ProductComponent)productsTree.getValue());
            	addTreeListenerToForm(this);
            	prepareProductForm(Mode.EDIT_PRODUCT);
            }
        }else{
        	if (id != null) {
        		final Item item = productsTree.getItem(id);
        		final Property p = item.getItemProperty(CAPTION_PROPERTY);
        		p.setValue(productCRUDForm.getNameTxt().getValue());
        		this.requestRepaint();
        	}
        }
    }

	
	public void prepareProductForm(Mode mode){
		productCRUDForm.prepareProductForm(mode);
	}
	
	public void repaintProductsTree(){
		productsTree.requestRepaint();
	}

	public ProductsTree getProductsTree() {
		return productsTree;
	}

	public void addTreeListenerToForm(ProductManagementComponent listener){
		productCRUDForm.addTreeListener(listener);
	}
	
	public void removeTreeListenerFromForm(ProductManagementComponent listner){
		productCRUDForm.removeTreeListener(listner);
	}
	
	public ProductComponent getUpdatedProduct(){
		return productCRUDForm.getSelectedProduct();
	}
	
	
}
